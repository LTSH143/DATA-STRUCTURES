#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 10
struct Queue {
    int items[MAX_SIZE];
    int front, rear;
};
void initializeQueue(struct Queue *q) {
    q->front = -1;
    q->rear = -1;
}
int isEmpty(struct Queue *q) {
    return (q->front == -1 && q->rear == -1);
}
int isFull(struct Queue *q) {
    return (q->rear == MAX_SIZE - 1);
}
void enqueue(struct Queue *q, int value) {
    if (isFull(q)) {
        printf("Queue is full. Cannot enqueue.\n");
    } else {
        if (isEmpty(q)) {
            q->front = 0; 
        }
        q->rear++;
        q->items[q->rear] = value;
        printf("%d enqueued to the queue.\n", value);
    }
}
void dequeue(struct Queue *q) {
    if (isEmpty(q)) {
        printf("Queue is empty. Cannot dequeue.\n");
    } else {
        printf("%d dequeued from the queue.\n", q->items[q->front]);
        if (q->front == q->rear) {
            initializeQueue(q);
        } else {
            q->front++;
        }
    }
}
void display(struct Queue *q) {
    if (isEmpty(q)) {
        printf("Queue is empty.\n");
    } else {
        printf("Queue elements: ");
        for (int i = q->front; i <= q->rear; i++) {
            printf("%d ", q->items[i]);
        }
        printf("\n");
    }
}
int main() {
    struct Queue q;
    initializeQueue(&q);
    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);
    display(&q);
    dequeue(&q);
    display(&q);
    return 0;
}
