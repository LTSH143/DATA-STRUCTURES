#include <stdio.h>
#include <stdlib.h>
struct Edge {
    int src, dest, weight;
};
struct Subset {
    int parent, rank;
};
int find(struct Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}
void unionSets(struct Subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}
void kruskal(struct Edge edges[], int V, int E) {
    struct Subset *subsets = (struct Subset *)malloc(V * sizeof(struct Subset));
    for (int i = 0; i < V; i++) {
        subsets[i].parent = i;
        subsets[i].rank = 0;
    }
    qsort(edges, E, sizeof(edges[0]), [](const void *a, const void *b) {
        return ((struct Edge *)a)->weight - ((struct Edge *)b)->weight;
    });
    struct Edge *result = (struct Edge *)malloc((V - 1) * sizeof(struct Edge));
    int i = 0;
    int edgeIndex = 0;
    while (i < V - 1 && edgeIndex < E) {
        struct Edge next_edge = edges[edgeIndex++];

        int x = find(subsets, next_edge.src);
        int y = find(subsets, next_edge.dest);
        if (x != y) {
            result[i++] = next_edge;
            unionSets(subsets, x, y);
        }
    }
    for (int j = 0; j < V - 1; j++) {
        printf("%d -- %d == %d\n", result[j].src, result[j].dest, result[j].weight);
    }
    free(subsets);
    free(result);
}
int main() {
    int V = 4; 
    int E = 5; 
    struct Edge edges[] = {
        {0, 1, 10},
        {0, 2, 6},
        {0, 3, 5},
        {1, 3, 15},
        {2, 3, 4}
    };
    kruskal(edges, V, E);
    return 0;
}
